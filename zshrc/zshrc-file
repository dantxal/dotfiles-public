# Filename: /Users/krishna/github/dotfiles-public/zshrc/zshrc-file

boldGreen="\033[1;32m"
boldYellow="\033[1;33m"
boldRed="\033[1;31m"
boldPurple="\033[1;35m"
boldBlue="\033[1;34m"
noColor="\033[0m"

# Run a clear command right after I log in to any host
clear

# Create the symlinks I normally use
# ~/.config dir holds nvim, neofetch, alacritty configs
# If the dir/file that the symlink points to doesnt exist, it will error out, so I direct them to dev null
mkdir -p ~/.config
mkdir -p ~/.config/alacritty
ln -snf ~/github/dotfiles-public/vimrc/vimrc-file ~/.vimrc >/dev/null 2>&1
ln -snf ~/github/dotfiles-public/vimrc/vimrc-file ~/github/obsidian_main/.obsidian.vimrc >/dev/null 2>&1
ln -snf ~/github/dotfiles-public/zshrc/zshrc-file ~/.zshrc >/dev/null 2>&1
ln -snf ~/github/dotfiles-public/tmux/tmux.conf ~/.tmux.conf >/dev/null 2>&1
ln -snf ~/github/dotfiles-public/karabiner ~/.config/karabiner >/dev/null 2>&1
ln -snf ~/github/dotfiles-public/neovim/nvim-lazyvim ~/.config/nvim >/dev/null 2>&1
ln -snf ~/github/dotfiles-public/alacritty/alacritty.toml ~/.config/alacritty/alacritty.toml >/dev/null 2>&1
ln -snf ~/github/dotfiles-public/yabai/yabairc ~/.yabairc >/dev/null 2>&1
ln -snf ~/github/dotfiles-public/hammerspoon ~/.hammerspoon >/dev/null 2>&1
# # This is on the other repo where I keep my ssh config files
# I commented this as I don't have access to this repo in all the hosts
# ln -snf ~/github/dotfiles/sshconfig-pers ~/.ssh/config >/dev/null 2>&1

# Autocompletion settings
# https://github.com/Phantas0s/.dotfiles/blob/master/zsh/completion.zsh
# These have to be on the top, I remember I had issues with some autocompletions if not
zmodload zsh/complist
autoload -U compinit; compinit
_comp_options+=(globdots) # With hidden files
# setopt MENU_COMPLETE        # Automatically highlight first element of completion menu
setopt AUTO_LIST            # Automatically list choices on ambiguous completion.
setopt COMPLETE_IN_WORD     # Complete from both ends of a word.
# Define completers
zstyle ':completion:*' completer _extensions _complete _approximate
# Use cache for commands using cache
zstyle ':completion:*' use-cache on
# You have to use $HOME, because since in "" it will be treated as a literal string
zstyle ':completion:*' cache-path "$HOME/.zcompcache"
# Complete the alias when _expand_alias is used as a function
zstyle ':completion:*' complete true
# Allow you to select in a menu
zstyle ':completion:*' menu select
# Autocomplete options for cd instead of directory stack
zstyle ':completion:*' complete-options true
zstyle ':completion:*' file-sort modification
zstyle ':completion:*:*:*:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'
zstyle ':completion:*:*:*:*:descriptions' format '%F{blue}-- %D %d --%f'
zstyle ':completion:*:*:*:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:*:*:*:warnings' format ' %F{red}-- no matches found --%f'
# zstyle ':completion:*:default' list-prompt '%S%M matches%s'
# Colors for files and directory
zstyle ':completion:*:*:*:*:default' list-colors ${(s.:.)LS_COLORS}

# Current number of entries Zsh is configured to store in memory (HISTSIZE) 
# How many commands Zsh is configured to save to the history file (SAVEHIST)
# echo "HISTSIZE: $HISTSIZE"
# echo "SAVEHIST: $SAVEHIST"
# Store 10,000 entries in the command history
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
# Check if the history file exists, if not, create it
if [[ ! -f $HISTFILE ]]; then
    touch $HISTFILE
    chmod 600 $HISTFILE
fi
# Append commands to the history file as they are entered
setopt appendhistory
# Record timestamp of each command (helpful for auditing)
setopt extendedhistory
# Share command history data between all sessions
setopt sharehistory
# Incrementally append to the history file, rather than waiting until the shell exits
setopt incappendhistory
# Ignore duplicate commands in a row
setopt histignoredups
# Exclude commands that start with a space
setopt histignorespace
# Custom list of commands to ignore (adjust as needed)
# HISTIGNORE='ls*:bg*:fg*:exit*:ll*'

# Common settings and plugins
alias ll='ls -l'
alias python='python3'
alias lla='ls -al'
# Shows the last 30 entries, default is 15
alias history='history -30'
alias v='nvim'

# kubernetes, if you need help, just run 'kgp --help' for example
alias k='kubectl'
alias kga='kubectl get all'
alias kgp='kubectl get pods'
alias kgpa='kubectl get pods --all-namespaces'
alias kgpo='kubectl get pods -o wide'

# Every time I log into a host I want to pull my github repos
cd ~/github/dotfiles-public && git pull > /dev/null 2>&1 || echo "Failed to pull dotfiles"

# Detect OS
case "$(uname -s)" in
    Darwin)
        OS='Mac'
        ;;
    Linux)
        OS='Linux'
        ;;
    *)
        OS='Other'
        ;;
esac

# macOS-specific configurations
if [ "$OS" = 'Mac' ]; then

    # This is for brew autocompletion, instructions ask to add it befor the general autocomplete settings
    if type brew &>/dev/null
    then
      FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
    
      autoload -Uz compinit
      compinit
    fi

    # Initialize Starship, if it is installed
    if command -v starship &>/dev/null; then
        eval "$(starship init zsh)"
        export STARSHIP_CONFIG=$HOME/github/dotfiles-public/starship-config/starship.toml
    fi

    # Add MySQL client to PATH, if it exists
    if [ -d "/opt/homebrew/opt/mysql-client/bin" ]; then
        export PATH="/opt/homebrew/opt/mysql-client/bin:$PATH"
    fi

    # Source Google Cloud SDK configurations, if Homebrew and the SDK are installed
    if command -v brew &>/dev/null; then
        if [ -f "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc" ]; then
            source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
        fi
        if [ -f "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc" ]; then
            source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"
        fi
    fi

    # Use 'gls' as 'ls' if 'gls' is installed
    if command -v gls &>/dev/null; then
        alias ls='gls --color=auto'
    fi

    # Configure shell to point to z.lua, if Homebrew, lua and z.lua are installed
    if command -v brew &>/dev/null && command -v lua &>/dev/null; then
        if [ -f "$(brew --prefix z.lua)/share/z.lua/z.lua" ]; then
            eval "$(lua $(brew --prefix z.lua)/share/z.lua/z.lua --init zsh enhanced once)"
        fi
    fi

    # Source zsh-vi-mode plugin, if it exists
    if [ -f "/opt/homebrew/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh" ]; then
        source /opt/homebrew/opt/zsh-vi-mode/share/zsh-vi-mode/zsh-vi-mode.plugin.zsh
        # Following 4 lines modify the escape key to `kj`
        ZVM_VI_ESCAPE_BINDKEY=kj
        ZVM_VI_INSERT_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
        ZVM_VI_VISUAL_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
        ZVM_VI_OPPEND_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY

        # Source .fzf.zsh so that the ctrl+r bindkey is given back fzf
        zvm_after_init_commands+=('[ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh')

        # # if zsh-history-substring-search is installed, source it so that the arrows are given back to it
        # if [ -f "$(brew --prefix)/share/zsh-history-substring-search/zsh-history-substring-search.zsh" ]; then
        #   zvm_after_init_commands+=('source $(brew --prefix)/share/zsh-history-substring-search/zsh-history-substring-search.zsh')
        #   zvm_after_init_commands+=('bindkey "^[[A" history-substring-search-up')
        #   zvm_after_init_commands+=('bindkey "^[[B" history-substring-search-down')
        # fi
    fi

    # Initialize fzf if installed
    [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

    # Source zsh-autosuggestions if file exists
    if [ -f "$(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh" ]; then
      source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh
    fi

    # # Source zsh-history-substring-search if file exists
    # # Also leaving this here in case fzf is not installed
    # if [ -f "$(brew --prefix)/share/zsh-history-substring-search/zsh-history-substring-search.zsh" ]; then
    #   source $(brew --prefix)/share/zsh-history-substring-search/zsh-history-substring-search.zsh
    #   bindkey '^[[A' history-substring-search-up
    #   bindkey '^[[B' history-substring-search-down
    # fi

    # Initialize kubernetes kubectl completion if kubectl is installed
    # https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion
    if command -v kubectl &>/dev/null; then
       source <(kubectl completion zsh)
    fi
fi

# Linux (Debian)-specific configurations
if [ "$OS" = 'Linux' ]; then
    # Add Debian-specific configurations here
    # For example, you can add z.lua config for Linux here, if not installed will install them

    alias ls='ls --color=auto'

    echo "Updating packages, please wait (wont upgrade)..."
    sudo apt-get update >/dev/null 2>&1

    # Initialize Starship, if installed, otherwise install it
    # Extract the last digit of $HOST
    last_digit="${HOST: -1}"
    # Determine the Starship config file to use
    case $last_digit in
        1)
        starship_file="starship1.toml"
        ;;
        2)
        starship_file="starship2.toml"
        ;;
        3)
        starship_file="starship3.toml"
        ;;
        *)
        starship_file="starship4.toml"
        ;;
    esac
    if command -v starship &>/dev/null; then
      eval "$(starship init zsh)"
      # This is what applies the specific profile
      export STARSHIP_CONFIG=$HOME/github/dotfiles-public/starship-config/$starship_file
    else
      echo
      echo "Installing starship, please wait..."
      # -y at the end answers 'yes' to any prompts
      curl -sS https://starship.rs/install.sh | sh -s - -y >/dev/null 2>&1
      # Verify starship installation
      if ! command -v starship >/dev/null 2>&1; then
      	echo -e "${boldRed}Warning: Failed to install Starship. Check this manually${noColor}"
      	# sleep 1
      else
          # After installing, initialize it
          eval "$(starship init zsh)"
          # This is what applies the specific profile
          export STARSHIP_CONFIG=$HOME/github/dotfiles-public/starship-config/$starship_file
          echo "Starship installed successfully."
      fi
    fi


    # Initialize z.lua, if it is installed
    if command -v $HOME/github/z.lua/z.lua &>/dev/null; then
        eval "$(lua $HOME/github/z.lua/z.lua --init zsh enhanced once)"
    else
        # First we need to install Lua
        # Search for the latest version of Lua and extract the package name
        echo
        echo "Installing z.lua, please wait..."
        LUA_PACKAGE=$(apt search lua | grep -o 'lua[0-9]\+\.[0-9]\+/stable' | sort -Vr | head -n 1 | cut -d'/' -f1)
        # Check if a package was found
        if [ -z "$LUA_PACKAGE" ]; then
            echo
            echo -e "${boldGreen}No Lua package found. Skipping z.lua installation...${noColor}"
            # sleep 1
        else
            # sleep 1
            sudo apt-get install -y $LUA_PACKAGE >/dev/null 2>&1
            # Verify if Lua was installed successfully
            if ! command -v lua >/dev/null 2>&1; then
                echo -e "${boldRed}Warning: Failed to install Lua. Check this manually.${noColor}"
                # sleep 1
            else
                # After installing, initialize it
                eval "$(lua $HOME/github/z.lua/z.lua --init zsh enhanced once)"
                echo "$LUA_PACKAGE installed successfully."
            fi
        fi
    fi


    # Source zsh-autosuggestions if file exists
    if [ -f "$HOME/github/zsh-autosuggestions/zsh-autosuggestions.zsh" ]; then
      source $HOME/github/zsh-autosuggestions/zsh-autosuggestions.zsh
    else
      echo
      echo "Installing zsh-autosuggestions, please wait..."
      # Download github repo
      mkdir -p $HOME/github
      cd $HOME/github
      git clone https://github.com/zsh-users/zsh-autosuggestions >/dev/null 2>&1
      # Verify if the repo was cloned successfully
      if [ ! -d "$HOME/github/zsh-autosuggestions" ]; then
        echo
        echo -e "${boldRed}Warning: Failed to clone the zsh-autosuggestions repository. Check this manually${noColor}"
        # sleep 1
      else
        # After installing, initialize it
        source $HOME/github/zsh-autosuggestions/zsh-autosuggestions.zsh
        echo "Successfully installed zsh-autosuggestions"
      fi
    fi


    # Initialize zsh-vi-mode, if it is installed
    if [ -d "$HOME/github/zsh-vi-mode" ]; then
        source $HOME/github/zsh-vi-mode/zsh-vi-mode.plugin.zsh
        # This modifies the escape key
        ZVM_VI_ESCAPE_BINDKEY=kj
        ZVM_VI_INSERT_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
        ZVM_VI_VISUAL_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
        ZVM_VI_OPPEND_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
        # Source .fzf.zsh so that the ctrl+r bindkey is given back fzf
        zvm_after_init_commands+=('[ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh')
    else
        echo
        echo "Installing zsh-vi-mode, please wait..."
        # Download zsh-vi-mode from github
        mkdir -p $HOME/github
        cd $HOME/github
        git clone https://github.com/jeffreytse/zsh-vi-mode.git >/dev/null 2>&1
        # Verify if the zsh-vi-mode GitHub repo was cloned successfully
        if [ ! -d "$HOME/github/zsh-vi-mode" ]; then
          echo
          echo -e "${boldRed}Warning: Failed to clone the zsh-vi-mode repository. Check this manually.${noColor}"
          # sleep 1
        else
          # After installing, initialize it
          source $HOME/github/zsh-vi-mode/zsh-vi-mode.plugin.zsh
          # This modifies the escape key
          ZVM_VI_ESCAPE_BINDKEY=kj
          ZVM_VI_INSERT_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
          ZVM_VI_VISUAL_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
          ZVM_VI_OPPEND_ESCAPE_BINDKEY=$ZVM_VI_ESCAPE_BINDKEY
          # Source .fzf.zsh so that the ctrl+r bindkey is given back fzf
          zvm_after_init_commands+=('[ -f $HOME/.fzf.zsh ] && source $HOME/.fzf.zsh')
          echo "Successfully installed zsh-vi-mode"
        fi
    fi


    # Initialize neofetch, if it is installed
    if command -v neofetch &>/dev/null; then
        # leave blank space before the command
        echo
        neofetch
    fi


    # Initialize fzf if installed
    if [ -f ~/.fzf.zsh ]; then
        source ~/.fzf.zsh
    else
        echo
        echo "Installing fzf, please wait..."
        # Download fzf from GitHub if it's not installed
        mkdir -p $HOME/github
        cd $HOME/github
        git clone --depth 1 https://github.com/junegunn/fzf.git >/dev/null 2>&1
        # Verify if the fzf GitHub repo was cloned successfully
        if [ ! -d "$HOME/github/fzf" ]; then
            echo -e "${boldRed}Warning: Failed to clone the fzf repository. Check this manually.${noColor}"
        else
            echo "Successfully cloned the fzf repository."
            # Install fzf, this will answer `y`, `y`, and `n` to the questions asked
            echo -e "y\ny\nn" | $HOME/github/fzf/install >/dev/null 2>&1
            # After installing, initialize it
            source ~/.fzf.zsh
            echo "Successfully installed fzf"
        fi
    fi

    # Check if Neovim is already installed, otherwise install it
    if ! command -v nvim &> /dev/null; then
        echo
        echo "Installing neovim, please wait..."
        # Install latest version of neovim
        # Debian repos have a really old version, so had to go this route
        # switched to wget as was having issues when downloading with curl
        cd ~
        wget https://github.com/neovim/neovim/releases/latest/download/nvim.appimage >/dev/null 2>&1
        # curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
        # After downloading it, you have to make it executable to be able to extract it
        chmod u+x nvim.appimage
        # I'll extract the executable and expose it globally
        ./nvim.appimage --appimage-extract >/dev/null 2>&1
        sudo mv squashfs-root /
        sudo ln -s /squashfs-root/AppRun /usr/bin/nvim
        # Remove any cached files that may exist from a previous config
        echo "removing backup files.."
        mv ~/.local/share/nvim{,.bak}
        mv ~/.local/state/nvim{,.bak}
        mv ~/.cache/nvim{,.bak}
        echo "Downloaded neovim"
    fi

    # These below ones are neovim dependencies
    # Check and install lazygit if not installed
    if ! command -v lazygit &> /dev/null; then
        echo "Installing lazygit..."
        LAZYGIT_VERSION=$(curl -s "https://api.github.com/repos/jesseduffield/lazygit/releases/latest" | grep -Po '"tag_name": "v\K[^"]*')
        wget -O lazygit.tar.gz "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_${LAZYGIT_VERSION}_Linux_x86_64.tar.gz" >/dev/null 2>&1
        tar xf lazygit.tar.gz lazygit
        sudo install lazygit /usr/local/bin
        echo "Downloaded lazygit"
    fi

    # Check and install the C compiler (build-essential) if not installed
    if ! gcc --version &> /dev/null; then
        echo "Installing C compiler (build-essential) for nvim-treesitter..."
        sudo apt install build-essential -y >/dev/null 2>&1
        echo "Installed C compiler"
    fi

    # Check and install ripgrep if not installed
    if ! command -v rg &> /dev/null; then
        echo "Installing ripgrep..."
        sudo apt-get install ripgrep -y >/dev/null 2>&1
        echo "Installed ripgrep"
    fi

    # Check and install fd-find if not installed
    if ! command -v fdfind &> /dev/null; then
        echo "Installing fd-find..."
        sudo apt-get install fd-find -y >/dev/null 2>&1
        echo "Installed fd_find"
    fi

    # Check and install fuse if not installed
    if ! command -v fusermount &> /dev/null; then
        echo "Installing fuse..."
        sudo apt install fuse -y >/dev/null 2>&1
        echo "Installed fuse"
    fi

    # Initialize kubernetes kubectl completion if kubectl is installed
    # https://kubernetes.io/docs/tasks/tools/install-kubectl-macos/#enable-shell-autocompletion
    if command -v kubectl &>/dev/null; then
       source <(kubectl completion zsh)
    fi
fi

